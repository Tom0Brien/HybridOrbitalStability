function [] = plot_results(sys,ctrl,sim,res)
%% PLOT_RESULTS 
% Plots various figures for paper

%% Unpack results
res.q = res.x(:,1:2);
res.p = zeros(length(res.t),2);
res.H = zeros(length(res.t),1);
res.Hd = zeros(length(res.t),1);
res.qd = zeros(length(res.t),2);
res.qe = zeros(length(res.t),2);
res.dqd = zeros(length(res.t),2);

res.fzb = zeros(length(res.t),2);
% res.ptilde = zeros(length(res.t),2);

for i=1:length(res.t)
    res.p(i,:) = sys.M(res.q(i,:))*res.x(i,3:4).';
    res.H(i) = sys.H(res.q(i,:).',res.p(i,:).');
    res.Hd(i) = ctrl.Hd(res.q(i,:).',res.p(i,:).');
    res.qp(i,:) = ctrl.qp(res.q(i,:)).';
    res.qe(i,:) = res.q(i,:) - res.qp(i,:);
    res.dqd(i,:) = ctrl.dqd(res.q(i,1));
    res.fzb(i,:) = ctrl.fzb(res.q(i,:));
%     res.ptilde(i,:) = ctrl.ptilde(res.q(i,1));
end

%% Plot configuration vs time
figure;
subplot(4,1,1)
plot(res.t,res.fzb(:,1),'linewidth',4);
legend('q_1', 'q_1 desired')
xlabel('time (s)')
ylabel('Fzb')
grid on


% Plot closed loop coordinates
figure;
subplot(4,1,1)
plot(res.t,res.x(:,1),'LineWidth',4,'Color',"#EDB120");
hold on
plot(res.t,res.qp(:,1),'--','LineWidth',4,'Color',"black");
legend('$q_1$', '$q_1 desired$','Interpreter','Latex','FontSize',12);
xlabel('time (s)')
ylabel('Configuration')
grid on
subplot(4,1,2)
plot(res.t,res.x(:,2),'LineWidth',4,'Color',"#4DBEEE");
hold on
plot(res.t,res.qp(:,2),'--','LineWidth',4,'Color',"black");
legend('$q_2$ ', '$q_2 desired$','Interpreter','Latex','FontSize',12);
xlabel('time (s)')
ylabel('Configuration')
grid on
subplot(4,1,3)
plot(res.t,res.x(:,3),'LineWidth',4,'Color',"#EDB120");
hold on
plot(res.t,res.dqd(:,1),'--','LineWidth',4,'Color',"black");
legend('$\dot{q}_1$', '$\dot{q}_1 desired$','Interpreter','Latex','FontSize',12);
xlabel('time (s)')
ylabel('Velocity')
grid on
subplot(4,1,4)
plot(res.t,res.x(:,4),'LineWidth',4,'Color',"#4DBEEE");
hold on
plot(res.t,res.dqd(:,2),'--','LineWidth',4,'Color',"black");
legend('$\dot{q}_2$ ', '$\dot{q}_2 desired$','Interpreter','Latex','FontSize',12);
xlabel('time (s)')
ylabel('Velocity')
grid on


%% Plot configuration
figure;
plot(res.q(:,1),res.q(:,2),'LineWidth',4);
hold on;
plot(res.qp(:,1),res.qp(:,2),'--','LineWidth',4);
grid on;
legend('q','q_d')
xlabel('q_1')
ylabel('q_2')
axis([-0.25 0.25 -0.25 0.25])

%% Plot path with mesh grid
figure;
N = 0.3;
dt = 0.01;
[X,Y] = meshgrid(-N:dt:N,-N:dt:N);
Z = zeros(length(X),length(Y));
for i = 1:length(X)
    for j =1:length(Y)
    Z(i,j) = ctrl.Vd([X(i,j);Y(i,j)]);
    end
end
surf(X,Y,Z);
hold on;
grid off;
x = linspace(-N,N,100);
y = zeros(size(x,2),1);
for i=1:size(x,2)
    y(i) = ctrl.qd(x(i));
end
plot3(x,y,zeros(length(x),1)+0.01, 'LineWidth',5,'Color','red');



%% Plot path with vector field
figure;
grid on;
[X,Y] = meshgrid(-N:dt:N,-N:dt:N);

U = ones(size(X));
V = ones(size(Y));
q1 = linspace(-N,N,length(X));
qp_plot = ctrl.qp(q1);
axis([0 0.1 0 0.1])
q_d = zeros(length(X),2);
for i = 1:size(X)
q_d(i,:) = ctrl.qp(q1(i)).';
end
for i=1:size(X,1)
    for j=1:size(X,2)
        q_ij = [X(i,j);Y(i,j)];
        vdb_plot = ctrl.vdb(q_ij);
        U(i,j) = vdb_plot(1);
        V(i,j) = vdb_plot(2);
    end
end
plot(q_d(:,1),q_d(:,2),'LineWidth',4, 'Color','black');
hold on;
quiver(X,Y,U,V,'LineWidth', 1, "Color","blue", 'LineWidth',1)
% Define the range of values for q1 and q2
q1_range = linspace(-N, N, 25); 
q2_range = linspace(-N, N, 25);

% Initialize empty arrays to store the solutions
q1_sol = [];
q2_sol = [];

% Use a nested loop to iterate over the range of values for q1 and q2
for i = 1:length(q1_range)
    for j = 1:length(q2_range)
        % Use fsolve to find the root of y for the current values of q1 and q2
        q_sol = fsolve(sys.y, [q1_range(i); q2_range(j)]);
        if(sys.x(q_sol) > 0.3)
            q1_sol = [q1_sol; q_sol(1)];
            q2_sol = [q2_sol; q_sol(2)];
        end
    end
end

% Plot the solutions
plot(q1_sol, q2_sol,'LineWidth',2,'Color','Red');
axis([-N N -N N ])
grid on;
xlabel("q_1" ,'FontSize', 25)
ylabel("q_2" ,'FontSize', 25)
legend('Desired path','Vector field','Switching surface','FontSize', 16)


%% Plot closed loop energy
figure;
plot(res.t, res.Hd, 'LineWidth',2.5)
grid on
legend('log H_d')
xlabel('time (s)')
ylabel('Closed loop energy')
% axis([0 1.5 -30 10])

% %% Plot error over time
% fig6 = figure(6);
% plot(res.t,res.qe(:,2))





end